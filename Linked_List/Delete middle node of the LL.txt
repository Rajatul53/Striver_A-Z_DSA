************Brute Force Approach*************

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        int count =0;
        ListNode temp =head;
        if(head==null || head.next==null)
            return head.next;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        count = count/2;
        temp =head;
        while(temp!=null&&temp.next!=null){
            count--;
            if(count==0){
                temp.next= temp.next.next;
                break;
                }
            else
                temp = temp.next;
        }
        return head;
    }
}


************Optimal Approach***************

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        int count =0;
        ListNode slow =head;
        ListNode fast = head;
        if(head==null || head.next==null)
            return head.next;

        fast = fast.next.next;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast  = fast.next.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}

